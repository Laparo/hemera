name: E2E Tests

on:
  workflow_dispatch:
    inputs:
      url:
        description: 'Base URL for E2E (e.g., https://hemera-<preview>.vercel.app)'
        required: false
  pull_request:
    types: [opened, synchronize, reopened]
  deployment_status:

jobs:
  e2e:
    runs-on: ubuntu-latest
    # Run on PR events or when a preview deployment succeeds
    if: |
      github.event_name != 'deployment_status' ||
      (github.event_name == 'deployment_status' && github.event.deployment_status.state == 'success')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Install jq (for parsing event payload)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Determine Base URL
        id: base
        run: |
          if [ -n "${{ inputs.url }}" ]; then
            echo "base=${{ inputs.url }}" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.event_name }}" = "deployment_status" ]; then
            ENV_URL=$(jq -r '.deployment_status.environment_url // empty' "$GITHUB_EVENT_PATH")
            TARGET=$(jq -r '.deployment_status.target_url // empty' "$GITHUB_EVENT_PATH")
            URL="${ENV_URL:-$TARGET}"
            if [ -n "$URL" ]; then
              echo "base=$URL" >> "$GITHUB_OUTPUT"
            else
              echo "base=http://localhost:3000" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "base=http://localhost:3000" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup test database and environment
        run: |
          # Create a minimal .env.local for tests
          cat > .env.local << EOF
          NEXTAUTH_URL=http://localhost:3000
          NEXTAUTH_SECRET=test-secret-for-ci-only
          DATABASE_URL=file:./test.db
          EOF
          
          # Create a temporary SQLite schema for CI testing
          cp prisma/schema.prisma prisma/schema.prisma.backup
          sed -i 's/provider = "postgresql"/provider = "sqlite"/g' prisma/schema.prisma
          sed -i 's/@db\.Text//g' prisma/schema.prisma
          sed -i 's/@db\.VarChar([0-9]*)//g' prisma/schema.prisma

      - name: Run Prisma setup
        run: |
          npx prisma generate
          npx prisma db push --force-reset
          npx prisma db seed
        env:
          DATABASE_URL: file:./test.db

      - name: Start Next.js server in background
        if: steps.base.outputs.base == 'http://localhost:3000'
        run: |
          npm run dev &
          # Wait for server to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'
        env:
          NODE_ENV: development

      - name: Run E2E tests
        id: e2e
        continue-on-error: true
        env:
          PLAYWRIGHT_BASE_URL: ${{ steps.base.outputs.base }}
        run: npm run e2e:dev

      - name: Upload Playwright HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          if-no-files-found: warn

      - name: Comment E2E result on PR
        if: ${{ github.event_name == 'pull_request' }}
        continue-on-error: true
        uses: actions/github-script@v7
        env:
          BASE_URL: ${{ steps.base.outputs.base }}
          OUTCOME: ${{ steps.e2e.outcome }}
        with:
          script: |
            const bodyMarker = '<!-- hemera-e2e-result -->';
            const outcome = process.env.OUTCOME || 'unknown';
            const base = process.env.BASE_URL || 'http://localhost:3000';
            const emoji = outcome === 'success' ? '✅' : (outcome === 'failure' ? '❌' : 'ℹ️');
            const body = `${bodyMarker}\n${emoji} E2E (${outcome}) against ${base}.\n` +
              `Artifacts: see 'playwright-report' in the Actions run.`;
            const { owner, repo } = context.repo;
            const issue_number = context.payload.pull_request.number;
            try {
              const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number });
              const existing = comments.find(c => (c.user?.type === 'Bot' || c.user?.login?.includes('[bot]')) && c.body?.includes(bodyMarker));
              if (existing) {
                await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
              } else {
                await github.rest.issues.createComment({ owner, repo, issue_number, body });
              }
            } catch (error) {
              console.log('Could not comment on PR:', error.message);
            }

      - name: Fail if tests failed
        if: ${{ steps.e2e.outcome == 'failure' }}
        run: |
          echo "E2E tests failed" >&2
          exit 1
          
      - name: Restore Prisma schema
        if: always()
        run: |
          if [ -f prisma/schema.prisma.backup ]; then
            mv prisma/schema.prisma.backup prisma/schema.prisma
          fi
