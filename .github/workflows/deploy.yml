name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment target (preview or production)'
        type: choice
        required: true
        default: production
        options:
          - preview
          - production

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 20
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hemera_test
        options: >-
          --health-cmd "pg_isready -U postgres -d hemera_test"
          --health-interval 5s
          --health-timeout 10s
          --health-retries 30
          --health-start-period 20s
    env:
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      # Use localhost to reach the Postgres service from the runner
      DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/hemera_test'
      NEXT_PUBLIC_CLERK_SIGN_IN_URL: /sign-in
      NEXT_PUBLIC_CLERK_SIGN_UP_URL: /sign-up
      NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL: /dashboard
      NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL: /dashboard

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Set BUILD_TIME (UTC)
        run: echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> "$GITHUB_ENV"

      - name: Install dependencies
        run: npm ci

      - name: Install Postgres client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Wait for Postgres to be ready
        env:
          PGPASSWORD: postgres
<<<<<<< HEAD
        run: >-
          until pg_isready -h localhost -p 5432 -U postgres -d hemera_test; do
            echo "Waiting for Postgres..."; sleep 5;
=======
        shell: bash
        run: |
          echo "Waiting for Postgres service health and connectivity..."
          attempts=0
          max_attempts=60 # 60 * 5s = 5 minutes
          until pg_isready -h postgres -p 5432 -U postgres -d hemera_test; do
            attempts=$((attempts+1))
            if [[ $attempts -ge $max_attempts ]]; then
              echo "Postgres not ready after $((max_attempts*5)) seconds (pg_isready)." >&2
              exit 1
            fi
            echo "Waiting for Postgres (pg_isready) attempt ${attempts}/${max_attempts} ...";
            sleep 5;
          done
          echo "pg_isready reports ready. Verifying SQL connection..."
          # Verify authentication and database availability
          for i in {1..10}; do
            if psql -h postgres -U postgres -d hemera_test -c "SELECT 1;" >/dev/null 2>&1; then
              echo "Successfully connected to hemera_test via psql."; break
            fi
            echo "psql connection attempt $i/10 failed, retrying in 3s..."; sleep 3;
            if [[ $i -eq 10 ]]; then
              echo "Failed to connect to Postgres via psql after multiple attempts." >&2
              exit 1
            fi
>>>>>>> 3edb563 (ci: harden Postgres health + wait (more retries, psql verification))
          done

      - name: Setup database schema
        run: npx prisma migrate deploy

      - name: Type checking
        run: npx tsc --noEmit

      - name: Prettier formatting check
        run: npm run format:check

      - name: ESLint validation
        run: npm run lint:ci

      - name: Run unit tests (with coverage)
        run: npm test -- --coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage
          path: coverage/
          retention-days: 7

      - name: Build verification
        run: npm run build
        env:
          BUILD_TIME: ${{ env.BUILD_TIME }}

  # Export a UTC timestamp for BUILD_TIME at workflow start (reusable)
  # Note: This env will be available to subsequent steps as ${{ env.BUILD_TIME }}
  # We define it via a dedicated job to avoid repetition; downstream jobs can still set/override per-step if needed.
  # GitHub Actions does not support dynamic env at workflow root from steps, so we set it in-place in jobs where needed too.

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: quality-gates
    # Run on PRs, or manual dispatch explicitly targeting preview on any ref
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'preview')
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Set BUILD_TIME (UTC)
        run: echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> "$GITHUB_ENV"

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token="${{ secrets.VERCEL_TOKEN }}"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        run: vercel build --token="${{ secrets.VERCEL_TOKEN }}"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          BUILD_TIME: ${{ env.BUILD_TIME }}
          # Temporary safeguard: disable Clerk during preview build to avoid prerender failures
          NEXT_PUBLIC_DISABLE_CLERK: 1

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token="${{ secrets.VERCEL_TOKEN }}" --yes)
          echo "url=$url" >> "$GITHUB_OUTPUT"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Comment PR with Preview URL
        if: github.event_name == 'pull_request' && steps.deploy.outputs.url != ''
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Preview deployment: ${{ steps.deploy.outputs.url }}'
            })

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: quality-gates
    # Run on push to main, or manual dispatch on main targeting production
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && inputs.environment == 'production')
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Set BUILD_TIME (UTC)
        run: echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> "$GITHUB_ENV"

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token="${{ secrets.VERCEL_TOKEN }}"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        run: vercel build --prod --token="${{ secrets.VERCEL_TOKEN }}"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          BUILD_TIME: ${{ env.BUILD_TIME }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token="${{ secrets.VERCEL_TOKEN }}" --yes)
          echo "url=$url" >> "$GITHUB_OUTPUT"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Print Deployment URL
        run: echo "Deployment URL=${{ steps.deploy.outputs.url }}"

  e2e-production:
    name: E2E Tests (Production)
    runs-on: ubuntu-latest
    needs: deploy-production
    # Run after production deploy on push to main, or on manual dispatch on main
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && inputs.environment == 'production')
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests against production
        run: npx playwright test --project=chromium
        env:
          PLAYWRIGHT_BASE_URL: https://hemera-tau.vercel.app

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-production
          path: playwright-report/
          retention-days: 30

  close-branch:
    name: Close Branch
    runs-on: ubuntu-latest
    needs: [deploy-production, e2e-production]
    # Only on main after production flow completes (push or manual dispatch on main)
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && inputs.environment == 'production')
    steps:
      - name: Close branch after successful production deployment
        run: echo "Branch will be closed only after successful production build and E2E tests"
