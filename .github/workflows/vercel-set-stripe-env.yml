name: Vercel - Set Stripe Environment Variables

on:
  workflow_dispatch:
    inputs:
      stripe_secret_key:
        description: 'Optional: STRIPE_SECRET_KEY (overrides secret if provided)'
        required: false
        default: ''
      next_public_stripe_publishable_key:
        description: 'Optional: NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY (overrides secret if provided)'
        required: false
        default: ''
      set_webhook_secret:
        description: 'Also set STRIPE_WEBHOOK_SECRET (if provided as a secret)'
        required: false
        default: 'false'
        type: choice
        options: ['false', 'true']
      set_api_version:
        description: 'Also set STRIPE_API_VERSION (if provided as a secret)'
        required: false
        default: 'false'
        type: choice
        options: ['false', 'true']

jobs:
  set-env:
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate required secrets
        shell: bash
        env:
          SECRET_KEY_INPUT: ${{ inputs.stripe_secret_key }}
          PUBLISHABLE_KEY_INPUT: ${{ inputs.next_public_stripe_publishable_key }}
        run: |
          set -euo pipefail
          if [ -z "${VERCEL_TOKEN:-}" ]; then
            echo "::error::VERCEL_TOKEN secret is missing"; exit 1; fi
          if [ -z "${STRIPE_SECRET_KEY:-}" ] && [ -z "${SECRET_KEY_INPUT:-}" ]; then
            echo "::error::Provide STRIPE_SECRET_KEY as a secret or input"; exit 1; fi
          if [ -z "${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY:-}" ] && [ -z "${PUBLISHABLE_KEY_INPUT:-}" ]; then
            echo "::error::Provide NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY as a secret or input"; exit 1; fi

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Resolve Vercel project name/id
        id: project
        shell: bash
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_PROJECT_NAME: ${{ secrets.VERCEL_PROJECT_NAME }}
        run: |
          set -euo pipefail
          if [ -z "${VERCEL_ORG_ID:-}" ]; then
            echo "::error::Set VERCEL_ORG_ID as a repository secret"; exit 1
          fi
          if [ -n "${VERCEL_PROJECT_ID:-}" ]; then
            echo "project=$VERCEL_PROJECT_ID" >> $GITHUB_OUTPUT
          elif [ -n "${VERCEL_PROJECT_NAME:-}" ]; then
            echo "project=$VERCEL_PROJECT_NAME" >> $GITHUB_OUTPUT
          else
            echo "::error::Set VERCEL_PROJECT_ID or VERCEL_PROJECT_NAME as a repository secret"; exit 1
          fi

      - name: Configure Stripe env (production & preview)
        shell: bash
        env:
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          STRIPE_API_VERSION: ${{ secrets.STRIPE_API_VERSION }}
          SECRET_KEY_INPUT: ${{ inputs.stripe_secret_key }}
          PUBLISHABLE_KEY_INPUT: ${{ inputs.next_public_stripe_publishable_key }}
        run: |
          set -euo pipefail
          VERCEL_PROJECT="${{ steps.project.outputs.project }}"
          if [ -z "${VERCEL_PROJECT:-}" ]; then
            echo "::error::Please set repository secret VERCEL_PROJECT_ID or VERCEL_PROJECT_NAME"; exit 1; fi
          # Resolve values: prefer explicit workflow inputs over secrets when provided
          EFFECTIVE_STRIPE_SECRET_KEY="${SECRET_KEY_INPUT:-${STRIPE_SECRET_KEY:-}}"
          EFFECTIVE_PUBLISHABLE_KEY="${PUBLISHABLE_KEY_INPUT:-${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY:-}}"
          add_var() {
            local KEY="$1"; local VALUE="$2"
            if [ -z "${VALUE:-}" ]; then
              echo "Skipping $KEY (empty)"; return 0; fi
            for TARGET in production preview; do
              # Remove existing variable (ignore errors if it doesn't exist)
              vercel env rm -y "$KEY" "$TARGET" --scope "$VERCEL_ORG_ID" --project "$VERCEL_PROJECT" --token "$VERCEL_TOKEN" || true
              # Add new variable securely from stdin
              printf '%s' "$VALUE" | vercel env add "$KEY" "$TARGET" --scope "$VERCEL_ORG_ID" --project "$VERCEL_PROJECT" --token "$VERCEL_TOKEN"
            done
          }

          add_var STRIPE_SECRET_KEY "$EFFECTIVE_STRIPE_SECRET_KEY"
          add_var NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY "$EFFECTIVE_PUBLISHABLE_KEY"

          if [ "${{ github.event.inputs.set_webhook_secret }}" = "true" ]; then
            add_var STRIPE_WEBHOOK_SECRET "${STRIPE_WEBHOOK_SECRET:-}"
          fi
          if [ "${{ github.event.inputs.set_api_version }}" = "true" ]; then
            add_var STRIPE_API_VERSION "${STRIPE_API_VERSION:-}"
          fi

      - name: List Vercel env (sanity check)
        shell: bash
        run: |
          # This prints names only; Vercel does not reveal secret values
          vercel env ls --scope "$VERCEL_ORG_ID" --project "${{ steps.project.outputs.project }}" --token "$VERCEL_TOKEN"
