name: Vercel - Set Clerk Environment Variables

on:
  workflow_dispatch:
    inputs:
      clerk_publishable_key:
        description: 'Optional: NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY (overrides secret if provided)'
        required: false
        default: ''
      clerk_secret_key:
        description: 'Optional: CLERK_SECRET_KEY (overrides secret if provided)'
        required: false
        default: ''
      targets:
        description: 'Targets to update (comma-separated). One or both of: preview,production'
        required: false
        default: 'preview,production'

jobs:
  set-env:
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate required secrets
        shell: bash
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          PUBLISHABLE_KEY_INPUT: ${{ inputs.clerk_publishable_key }}
          SECRET_KEY_INPUT: ${{ inputs.clerk_secret_key }}
        run: |
          set -euo pipefail
          if [ -z "${VERCEL_TOKEN:-}" ]; then
            echo "::error::VERCEL_TOKEN secret is missing"; exit 1; fi
          if [ -z "${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:-}" ] && [ -z "${PUBLISHABLE_KEY_INPUT:-}" ]; then
            echo "::error::Provide NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY as a secret or input"; exit 1; fi
          if [ -z "${CLERK_SECRET_KEY:-}" ] && [ -z "${SECRET_KEY_INPUT:-}" ]; then
            echo "::error::Provide CLERK_SECRET_KEY as a secret or input"; exit 1; fi

      - name: Ensure jq is available
        shell: bash
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Resolve Vercel project name/id
        id: project
        shell: bash
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_PROJECT_NAME: ${{ secrets.VERCEL_PROJECT_NAME }}
        run: |
          set -euo pipefail
          if [ -z "${VERCEL_ORG_ID:-}" ]; then
            echo "::error::Set VERCEL_ORG_ID as a repository secret"; exit 1
          fi
          if [ -n "${VERCEL_PROJECT_ID:-}" ]; then
            echo "project=$VERCEL_PROJECT_ID" >> "$GITHUB_OUTPUT"
          elif [ -n "${VERCEL_PROJECT_NAME:-}" ]; then
            echo "project=$VERCEL_PROJECT_NAME" >> "$GITHUB_OUTPUT"
          else
            echo "::error::Set VERCEL_PROJECT_ID or VERCEL_PROJECT_NAME as a repository secret"; exit 1
          fi

      - name: Configure Clerk env (production & preview) via Vercel API
        shell: bash
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          PUBLISHABLE_KEY_INPUT: ${{ inputs.clerk_publishable_key }}
          SECRET_KEY_INPUT: ${{ inputs.clerk_secret_key }}
          TARGETS: ${{ inputs.targets }}
        run: |
          set -euo pipefail
          VERCEL_PROJECT="${{ steps.project.outputs.project }}"
          if [ -z "${VERCEL_PROJECT:-}" ]; then
            echo "::error::Please set repository secret VERCEL_PROJECT_ID or VERCEL_PROJECT_NAME"; exit 1; fi
          API_BASE="https://api.vercel.com"

          EFFECTIVE_PUBLISHABLE_KEY="${PUBLISHABLE_KEY_INPUT:-${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:-}}"
          EFFECTIVE_SECRET_KEY="${SECRET_KEY_INPUT:-${CLERK_SECRET_KEY:-}}"

          api_get_envs() {
            local TARGET="$1"
            curl -sS -H "Authorization: Bearer ${VERCEL_TOKEN}" \
              "${API_BASE}/v9/projects/${VERCEL_PROJECT}/env?target=${TARGET}&decrypt=false&teamId=${VERCEL_ORG_ID}"
          }

          api_delete_env_by_id() {
            local ID="$1"
            curl -sS -X DELETE -H "Authorization: Bearer ${VERCEL_TOKEN}" \
              "${API_BASE}/v9/projects/${VERCEL_PROJECT}/env/${ID}?teamId=${VERCEL_ORG_ID}" > /dev/null
          }

          api_create_env() {
            local KEY="$1"; local VALUE="$2"; local TARGET="$3"
            [ -n "${VALUE:-}" ] || return 0
            local PAYLOAD
            PAYLOAD=$(jq -cn \
              --arg key "$KEY" \
              --arg value "$VALUE" \
              --arg target "$TARGET" \
              '{key:$key, value:$value, type:"encrypted", target:[$target]}')
            curl -sS -X POST -H "Authorization: Bearer ${VERCEL_TOKEN}" \
              -H "Content-Type: application/json" \
              -d "${PAYLOAD}" \
              "${API_BASE}/v9/projects/${VERCEL_PROJECT}/env?teamId=${VERCEL_ORG_ID}" > /dev/null
          }

          add_var() {
            local KEY="$1"; local VALUE="$2"; local TARGET="$3"
            [ -n "${VALUE:-}" ] || { echo "Skipping ${KEY} for ${TARGET} (empty)"; return 0; }
            # Remove existing vars with same key for the target
            IDS=$(api_get_envs "$TARGET" | jq -r \
              --arg key "$KEY" \
              --arg target "$TARGET" \
              '(.envs // .) | map(select(.key == $key and (((.target // []) | index($target)) != null or ((.target // []) | length) == 0))) | .[].id // empty')
            if [ -n "${IDS:-}" ]; then
              printf '%s\n' "${IDS}" | while IFS= read -r ID; do [ -z "$ID" ] || api_delete_env_by_id "$ID"; done
            fi
            api_create_env "$KEY" "$VALUE" "$TARGET"
          }

          IFS=',' read -ra TARGET_LIST <<< "${TARGETS:-preview,production}"
          for TARGET in "${TARGET_LIST[@]}"; do
            TARGET=$(echo "$TARGET" | xargs)
            if [ "$TARGET" != "preview" ] && [ "$TARGET" != "production" ]; then
              echo "Skipping invalid target: $TARGET"; continue; fi
            add_var NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY "$EFFECTIVE_PUBLISHABLE_KEY" "$TARGET"
            add_var CLERK_SECRET_KEY "$EFFECTIVE_SECRET_KEY" "$TARGET"
          done

      - name: List Vercel env (sanity check)
        shell: bash
        run: |
          set -euo pipefail
          API_BASE="https://api.vercel.com"
          VERCEL_PROJECT="${{ steps.project.outputs.project }}"
          for TARGET in production preview; do
            echo "Targets: $TARGET"
            curl -sS -H "Authorization: Bearer ${VERCEL_TOKEN}" \
              "${API_BASE}/v9/projects/${VERCEL_PROJECT}/env?target=${TARGET}&decrypt=false&teamId=${VERCEL_ORG_ID}" \
              | jq -r '(.envs // .) | map("- \(.key) [\(((.target // []) | join(",")))]") | .[]?'
          done
