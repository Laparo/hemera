generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique(map: "users_email_unique")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  bookings      Booking[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  type              String?
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String    @id @default(cuid())
  title       String
  description String?
  slug        String    @unique
  price       Int
  currency    String    @default("USD")
  capacity    Int?
  date        DateTime?
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]

  @@map("courses")
}

model Booking {
  id                    String        @id @default(cuid())
  userId                String
  courseId              String
  paymentStatus         PaymentStatus @default(PENDING)
  stripePaymentIntentId String?
  stripeSessionId       String?
  amount                Int
  currency              String        @default("USD")
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  course                Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("bookings")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  REFUNDED
}
